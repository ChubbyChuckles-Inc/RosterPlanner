# GUI Implementation Roadmap (PyQt6) - RosterPlanner

Already Implemented (Baseline) - Marked as [x]
[x] Modular scraping pipeline (services.pipeline.run_full) producing HTML assets
[x] Ranking & roster parsing with BeautifulSoup (division names, matches, players)
[x] Club overview & team detail fetching (name-based filenames)
[x] Flat L2P roster page generation for parity
[x] Tracking state persistence (TrackingState) with upcoming match derivation
[x] CLI commands: run-full, compare-scrapes
[x] Naming utilities for safe filenames (including club names)
[x] Basic PyQt6 scaffold (earlier placeholder - to be superseded)

Legend / Conventions:
[ ] = Not started  [~] = In progress  [>] = Blocked/Pending prerequisite  [!] = Requires user decision  [R] = Research/Spike  [T] = Testing task  [D] = Documentation task
Milestones are grouped; each task should be small, testable, and demoable in the GUI.

Milestone 0 (Parallel): Design System & Visual Language
[x] 0.1 Establish canonical design tokens (color roles, spacing scale, radius scale, elevation levels)
[x] 0.1.1 Script to export tokens to JSON + auto-generate QSS variables
[x] 0.1.2 Contrast validation (WCAG 2.2 AA) automated check for each color pairing
[x] 0.2 Typography scale (base size, modular scale ratios, heading hierarchy) with runtime scaling factor
[x] 0.3 Iconography guidelines (stroke width, grid alignment, semantic categories)
[x] 0.4 Motion design spec (standard easing curves, duration tiers: instant <120ms, subtle 180ms, pronounced 260ms)
[x] 0.4.1 Implement easing curve library (cubic-bezier presets) + helper API
[x] 0.5 Component library gallery app (internal) to showcase components in isolation for QA
[x] 0.5.1 Visual regression capture (screenshot diff harness) - baseline hashing + storage implemented (no pixel diff yet)
[x] 0.5.2 Accessibility focus order & keyboard interaction tests (logical order + real Tab traversal harness)
[x] 0.6 High contrast theme + auto-switch based on OS setting (initial variant + tokens + selection helpers; auto-detect placeholder TBD)
[x] 0.7 Dynamic theming: derive tonal palette from a user-selected accent color (accent palette derivation utility + tests)
[x] 0.8 Theme hot-reload without full window refresh (ThemeManager diff logic + tests; UI propagation pending)
[x] 0.9 Layout density modes (comfortable / compact) with token-driven spacing
[x] 0.10 Custom user CSS/QSS override layer sandbox + validation (only whitelisted properties)
[x] 0.11 Color blindness simulation filter (protanopia/deuteranopia) preview tool
[x] 0.12 Internationalization readiness audit (string externalization, pluralization hooks)  -- core i18n registry, audit utilities & tests
[x] 0.13 RTL layout simulation toggle (anticipate future localization) -- direction registry, env var init, CLI flag & bootstrap integration
[x] 0.14 Dark mode adaptive charts color palette with semantic mapping (background, grid, accent, alert) -- dynamic series count, high-contrast awareness, muted variants, docstrings & tests
[x] 0.15 Micro-interaction catalog (hover, press, selection, drag indicators) -- registry, dataclass, exports & tests
[x] 0.16 Component performance budget matrix (max render/update/frame ms) -- registry, enforcement helper & tests
[x] 0.17 Skeleton loader component variants (table rows, cards, charts) -- registry, shape schema & tests
[x] 0.18 Empty state design templates (core templates registry + tests)
[x] 0.19 Error state visual taxonomy (soft warning vs blocking error vs critical failure)
[x] 0.20 Notification style guidelines (toast stacking, priority, dismissal timing)
[x] 0.21 Responsive breakpoints strategy (even if desktop-only, prepare for narrow window use)
[x] 0.21.1 Adaptive reflow rules for <900px width (collapse side docks to icon rail)
[x] 0.22 Interaction latency instrumentation (log >100ms event->paint path)
[x] 0.23 Color token drift detector (alerts if ad-hoc hardcoded color introduced)
[x] 0.24 Developer lint rule: forbid inline styles outside approved token map
[x] 0.25 Usability heuristic review checklist integrated into PR template
[x] 0.26 User preference persistence for all opt-in visual customizations
[x] 0.27 Plugin UI style contract (tokens-only consumption, no arbitrary palettes)
[x] 0.28 Print-friendly stylesheet for exports (light, high-contrast variant)
[x] 0.29 Continuous design snapshot pipeline (nightly screenshot diff of key views)
[x] 0.30 Onboarding tour overlays (progressively educative) framework placeholder
[x] 0.31 Focus ring style unification (accessible but subtle; 2px inner outline + outer glow optional)
[x] 0.32 Live theming stress test script (iterate all themes rapidly to detect leaks)
[x] 0.33 Offline-friendly icon & font caching (hash-based invalidation)
[x] 0.34 Visual density A/B toggling harness (future UX experimentation)
[x] 0.35 State diagram documentation for complex interactive components (Command Palette, Planner scenario editor)
[x] 0.36 Adaptive motion reduction (respect OS "Reduce Motion" setting)
[x] 0.37 Cursor affordance guidelines (resize, drag, wait, grabbing consistency)
[x] 0.38 Multi-monitor DPI scaling validation script
[x] 0.39 Color mixing utilities (blend, alpha composite) for layered surfaces
[x] 0.40 Progressive enhancement ladder (baseline minimal UI vs full feature overlay)
[x] 0.41 Theming unit tests (assert token existence & non-null mappings)
[x] 0.42 Design tokens changelog generation (diff across versions)
[x] 0.43 Metadata annotation for tokens (usage counts, deprecation flags)
[x] 0.44 Brand-neutral fallback theme (for white-label potential)
[x] 0.45 Accessible drag & drop alternative (keyboard reordering flow)
[x] 0.46 Live performance overlay (paint times, layout passes) dev mode only
[x] 0.47 Adaptive scrollbar styling (consistent across platforms, theme-aware)
[x] 0.48 Heatmap color ramp perceptual uniformity validation (Lab space check)
[x] 0.49 Component maturity index (alpha/beta/stable) surfaced in gallery
[x] 0.50 Design debt register (tracked issues with severity & remediation target)

Milestone 1: GUI Foundation & Infrastructure
[x] 1.1 Create dedicated GUI package structure (gui/app, gui/views, gui/viewmodels, gui/components, gui/services)
[x] 1.1.1 Define __all__ exports for public GUI API
[x] 1.1.2 Add __init__ docstrings for each subpackage
[x] 1.2 Implement Application bootstrap (QApplication factory, high DPI attributes, single-instance guard)
[x] 1.2.1 Add command-line flags for safe mode (disable plugins)
[x] 1.2.2 Add startup timing logger
[x] 1.3 Integrate config-driven startup (load last data directory, window geometry persistence)
[x] 1.3.1 Persist window state version tag (invalidate on layout schema change)
[x] 1.4 Add global dependency container/service locator (for data repo, analytics engine, event bus)
[x] 1.4.1 Provide test double injection hook for repositories
[x] 1.5 Implement EventBus (pub/sub) with typed signals for: DATA_REFRESHED, SELECTION_CHANGED, STATS_UPDATED
[x] 1.5.1 Event tracing toggle (debug overlay listing last 50 events)
[x] 1.6 Theme system: light/dark + accent colors (QSS loader, runtime switch action)
[x] 1.6.1 Theme validation lint (ensures required palette keys exist)
[x] 1.6.2 Add user custom theme JSON import
[x] 1.7 Icon & asset pipeline (SVG set, color adaptive to theme)
[x] 1.7.1 Provide asset hash map for cache busting
[x] 1.8 Logging panel integration (dockable QTextEdit + filtering by level)
[x] 1.8.1 Add structured log export (JSONL)
[x] 1.9 Global error handler (uncaught exception hook -> dialog + log)
[x] 1.9.1 Error deduplication (avoid spamming same trace)
[x] 1.9.2 Crash reproduction snippet generator (collect minimal context)
[x] 1.10 Add health check overlay (FPS, memory, DB query count)

Milestone 2: Dockable Main Window Architecture
[x] 2.1 Implement MainWindow (QMainWindow) with QDockWidget manager
[x] 2.1.1 Add central tabbed document area (multi-detail views)
[x] 2.2 Create core docks: Navigation Dock, Detail Dock, Stats Dock, Planner Dock, Logs Dock
[x] 2.2.1 Provide dock factory registry (extensible by plugins)
[x] 2.3 Implement layout save/restore (QSettings, named layout profiles)
[x] 2.3.1 Add layout reset to defaults action
[x] 2.3.2 Detect invalid/legacy layout and auto-migrate
[x] 2.4 Add Command Palette (Ctrl+P) for quick actions (open team, search player, run scrape)
[x] 2.4.1 Fuzzy matcher scoring utility
[x] 2.4.2 Recently executed command weighting
[x] 2.5 Keyboard shortcuts map + in-app cheat sheet dialog
[x] 2.5.1 Shortcut conflicts detector
[x] 2.6 Drag handle affordances & visual docking preview enhancements
[x] 2.7 Focus ring styling for accessibility

Milestone 3: Data Layer & SQLite Integration
[x] 3.1 Design SQLite schema (divisions, teams, matches, players, clubs, availability, planning_scenarios)
[x] 3.1.1 Create schema ER diagram doc (auto-generated via script)
[x] 3.1.2 Define naming conventions (snake_case, singular table names)
[x] 3.2 Implement migration manager (apply incremental migrations on startup)
[x] 3.2.1 Add migration checksum verification
[x] 3.2.2 Dry-run mode for migrations (preview SQL)
[x] 3.3 Build ingestion pipeline: HTML -> parsed objects -> DB upsert (idempotent)
[x] 3.3.1 Hash each raw HTML; skip unchanged ingestion
[x] 3.3.2 Record ingestion provenance table (timestamp, source file, parser version)
[x] 3.4 Add integrity checks (foreign keys, uniqueness of team_id per season)
[x] 3.4.1 Automated integrity test runnable from CLI
[x] 3.5 Abstract Repository layer (TeamRepo, MatchRepo, PlayerRepo, ClubRepo, AvailabilityRepo)
[x] 3.5.1 Introduce read-only vs write repo segregation interfaces
[x] 3.6 Implement unit tests for repositories (in-memory SQLite)
[x] 3.6.1 Add factory fixtures for test data
[x] 3.7 Add incremental refresh logic (only changed HTML re-parsed; hash-based caching)
[x] 3.7.1 Eviction policy for stale parsed objects (LRU / time-based)
[x] 3.8 Provide manual DB rebuild command (menu + command palette)
[x] 3.8.1 Rebuild progress dialog w/ partial rollback on error
[x] 3.9 Add query performance logging (slow query threshold)
[x] 3.10 Index advisor script (analyze EXPLAIN query plans)

Milestone 4: Data Navigation UI
[x] 4.1 Navigation Dock: tree model (Season -> Division -> Team -> Roster) using QAbstractItemModel
[x] 4.1.1 Virtualization for large node counts (lazy children loading)
[x] 4.2 Search bar (incremental fuzzy search across teams & players)
[x] 4.2.1 Debounce + background thread indexing
[x] 4.3 Filter chips (Division type: Erwachsene / Jugend, Level: Bezirksliga/Stadtklasse, Status: Active)
[x] 4.3.1 Persist active filters to settings
[x] 4.4 Persist navigation state (expanded nodes, last selection)
[x] 4.5 Context menu: Open in new tab (Detail view), Copy ID, Export JSON
[x] 4.5.1 Permission model placeholder (future multi-user roles)
[x] 4.6 Breadcrumb trail for current selection
[x] 4.7 Recently viewed list panel

Milestone 5: Detail Views
[x] 5.1 Team Detail View: roster table, match list, LivePZ summary
[x] 5.1.1 Column visibility toggles persisted
[x] 5.1.2 Inline player hover card (quick stats)
[x] 5.2 Player Detail View: career summary (historical LivePZ delta, per-match performance placeholder)
[x] 5.2.1 Sparkline micro charts next to player rows
[x] 5.3 Division Table View: ranking table parsed normalization (points, differential, form)
[x] 5.3.1 Sort multi-column by holding modifier keys
[x] 5.4 Club Detail View: all teams grouped by category + aggregated stats
[x] 5.5 HTML source preview panel (syntax-highlighted, diff vs previous scrape)
[x] 5.5.1 Toggle raw vs cleaned DOM
[x] 5.6 Export actions (CSV/JSON) per view
[x] 5.6.1 Export presets management
[x] 5.7 Split view mode (side-by-side comparison of two teams)
[x] 5.8 Tab pinning & color tagging

Milestone 5.9: Data Integration & Persistence Bridging (Scraped HTML -> SQLite -> GUI Views)
[x] 5.9.0 Audit current scraped assets & schema alignment (HTML fields vs DB tables)
[x] 5.9.1 Define repository interface layer (TeamRepo, PlayerRepo, MatchRepo, DivisionRepo, ClubRepo) with type-hinted contracts
[x] 5.9.2 Implement SQLite-backed repositories (read-only for now) using existing schema
[x] 5.9.3 Introduce IngestionCoordinator service (detect new/changed HTML, invoke parsers, upsert via repositories)  -- minimal filename-derived ingest (divisions, teams) placeholder
[x] 5.9.4 HTML hash tracking integration (reuse existing hashing; persist to provenance to skip unchanged) -- provenance table + processed/skipped counts
[x] 5.9.5 GUI hook: post-scrape automatic ingestion (ScrapeRunner -> IngestionCoordinator -> refresh views) -- PostScrapeIngestionHook integrated via bootstrap/MainWindow, sqlite_conn auto-registration, integration test added
[x] 5.9.6 TeamDetailView: replace placeholder bundle population with repository-driven roster + matches -- Added TeamDataService, RosterLoadWorker uses repositories first, unit test added
[x] 5.9.7 DivisionTableView: load real ranking table from parsed/ingested data (remove placeholder generator) -- Added DivisionDataService computing standings from repositories, integrated into MainWindow.open_division_table with fallback
[x] 5.9.8 ClubDetailView: aggregate stats via repositories (counts, average LivePZ, active/inactive splits)
[x] 5.9.9 PlayerDetailView: historical performance retrieval (match deltas) from ingested matches; fallback if insufficient data
[x] 5.9.10 Add MatchRepo upcoming/past match queries (date-range filtered)
[x] 5.9.11 DataFreshnessService: track last scrape + last ingest timestamps; expose to status bar
[x] 5.9.12 Transactional ingest with rollback on parser failure (atomic per division)
[x] 5.9.13 Error channel: structured ingest errors surfaced in Logs Dock with severity
[x] 5.9.14 Incremental ingest test (modify one roster HTML -> only that team re-parsed)
[x] 5.9.15 Repository unit tests (fixture-based: teams, players, matches) for each query path
[x] 5.9.16 Integration test: opening TeamDetailView after ingest shows real roster (no placeholder markers)
[x] 5.9.17 Integration test: division table displays correct ordering & points from ingested ranking HTML (tests/test_division_table_integration_points_ordering.py)
[x] 5.9.18 Performance test: ingest end-to-end (current dataset) < 2s baseline on reference machine (tests/test_ingestion_performance_baseline.py)
[x] 5.9.19 Add simple caching layer (in-memory) for frequently requested team rosters (LRU, size bound) (RosterCacheService + tests)
[x] 5.9.20 Consistency validation step post-ingest (foreign key & counts) with warning summary (ConsistencyValidationService + tests)
[x] 5.9.21 CLI command hook: ingest-only (without full scrape) for rapid iteration (cli.ingest_only + tests)
[x] 5.9.22 Command Palette actions: Force Re-ingest, Show Data Freshness (ingest_commands module + tests)
[x] 5.9.23 Documentation: ADR - Ingestion Lifecycle & Repository Abstraction (docs/adr/ADR-0001-ingestion-lifecycle-and-repository-abstraction.md)
[x] 5.9.24 Logging: structured JSON lines for ingest events (start, parsed, skipped, error) (ingestion_coordinator JSONL emitter + tests)
[x] 5.9.25 Fallback behavior: if ingest not yet run, views display informative empty states -- DataStateService gating (teams & division table) + deterministic primary club team completeness backfill
[x] 5.9.26 Graceful degradation: partial ingest (some divisions) still surfaces available data
[x] 5.9.27 Future hook placeholders for plugin-based parsers (register additional transforms)
[x] 5.9.28 Security / integrity note: sanitize HTML inputs before parsing (baseline helper)
[x] 5.9.29 Telemetry counters (optional) for ingest stats (parsed count, skipped count) behind debug flag
[x] 5.9.30 Roadmap review & clean-up of placeholder generation code removal
	- Completed initial clean-up: placeholder generation now gated by `SettingsService.allow_placeholders`.
	- Deprecation path documented: full removal & test migration scheduled under Milestone 5.10 polish tasks.

Milestone 5.10: Visual Polish & Design Integration (Leverage Milestone 0 Design System)
[x] 5.10.1 Apply design tokens across initial core views (DivisionTableView + token-based label/table styling) — groundwork for global application
[x] 5.10.2 Elevation layering for docks & panels (use elevation tokens + shadow presets)
[x] 5.10.3 Typography pass: assign semantic text roles (title, subtitle, body, caption) via token scale
[x] 5.10.4 Iconography integration: replace placeholder text buttons with registered SVG icons (navigation + common actions) -- registry, refresh/save/load icons, caching & color variant
[x] 5.10.5 Motion polish: add easing curve animations for dock show/hide & tab transitions (reuse easing presets)
[x] 5.10.6 Live theme toggle action (default/brand-neutral/high-contrast) wiring + status indication
[x] 5.10.7 Density mode switch (comfortable ↔ compact) applying spacing scale; persistence
[x] 5.10.8 Focus ring audit & unification across interactive widgets (ensure design token colors)
[x] 5.10.9 Empty & error state components: replace plain labels with design templates (empty state registry) -- integrated into PlayerDetailView, DivisionTableView, ClubDetailView, HtmlSourceView; division empty state test added
[x] 5.10.10 Skeleton loaders in Division Table & Team Detail while async data loads (remove instantaneous pop-in) -- integration + fade-out animation complete
[x] 5.10.11 Toast / notification styling pass (stacking, color roles, motion) using notification guidelines -- toast host + manager, basic QSS; motion animations deferred
[x] 5.10.12 Update & capture visual regression snapshot baseline (gallery + key views) [T]
[x] 5.10.13 Theme hot-reload propagation to already open views (complete 0.8 pending UI propagation)
[x] 5.10.14 Dock title bar token styling (active/inactive/hover states) + high contrast adjustments
[x] 5.10.15 Color blindness simulation toggle surfacing (View menu) with status indicator
[x] 5.10.16 Accessibility contrast check command: run WCAG validator over current palette & log deltas
[x] 5.10.17 Performance guard: measure style (re)apply time; warn if >50ms (instrumentation hook) [T]
[x] 5.10.18 Plugin style contract sample panel: render a mock plugin widget verifying tokens-only usage
[x] 5.10.19 Documentation: Visual integration guide (how tokens map to QSS + component roles) [D]
[x] 5.10.20 ADR: Strategy for progressive visual enhancement vs baseline performance (trade-offs) [D]
[x] 5.10.21 Gradient & tonal ramp tokens: multi-stop gradient registry + unit tests for token presence
[x] 5.10.22 Glass surface variant (blur/translucent panels) with performance capability check & fallback
[x] 5.10.23 Dynamic accent extraction from club logo or division banner (color quantization spike) [R]
[x] 5.10.24 Adaptive contrast auto-tuning when dynamic accent changes (recompute accessible on/surface pairs)
[x] 5.10.25 Variable font integration (weight/opsz axis) + smooth weight transition utility
[x] 5.10.26 Motion choreography map (component enter/exit/transform sequencing doc) [D]
[x] 5.10.27 Micro-interaction spring physics option (spring curve helper + tests)
[x] 5.10.28 Scroll-linked subtle fade/translate animations (perf guarded flag)
[x] 5.10.29 Contextual radius adaptation: large surface vs chip vs pill (apply radius scale tokens)
[x] 5.10.30 Themed multi-tone icon recoloring pipeline (primary/secondary/disabled states)
[x] 5.10.31 Focus ring glow variant (outer halo) + reduced-motion/high-contrast fallback
[x] 5.10.32 High-DPI asset scaler audit & auto-regeneration script [T]
[x] 5.10.33 Ambient color shift (very low frequency gradient drift) developer flag
[x] 5.10.34 Live theme preview diff panel (before/after token snapshot view)
[x] 5.10.35 Contrast heatmap overlay (debug tool highlighting low contrast regions)
[x] 5.10.36 Color vision deficiency simulation hook applied to active views (full pipeline integration)
[x] 5.10.37 Elevation audit & alignment report (map components -> elevation tokens) [D]
[x] 5.10.38 Spacing grid overlay toggle (8px baseline visualizer) dev tool
[x] 5.10.39 Container size observer utilities (responsive density + typography adjustments)
[x] 5.10.40 Keyboard navigation highlight trail animation (recent focus path) with perf opt-out
[x] 5.10.41 QSS inline color drift detector test (no hardcoded hex outside token map) [T]
[x] 5.10.42 Style recalculation performance instrumentation (log >50ms re-theme) [T]
[x] 5.10.43 Plugin visual sandbox harness validating token-only styling (live re-skin)
[x] 5.10.44 Enhanced adaptive scrollbars (hover expand + smooth color fade) themed
[x] 5.10.45 Animated skeleton shimmer effect (token gradient) + reduced-motion fallback
[x] 5.10.46 Adaptive blur intensity for glass surfaces (background luminance sampling)
[x] 5.10.47 Neutral ramp delta-E calibration tool (ensure perceptual steps) [R]
[x] 5.10.48 Split-view divider grab-handle styling + hover/active affordances
[x] 5.10.49 Inline error badge component (severity color roles + scale transitions)
[x] 5.10.50 Toast stack cascade animation (staggered spring) + accessibility pause on hover
[x] 5.10.51 Command Palette theming: group headers, icon badges, fuzzy score highlight spans
[x] 5.10.52 In-app theme JSON editor (live validation, preview, rollback)
[x] 5.10.53 Theme snapshot export (tokens + derived palette metadata) [D]
[x] 5.10.54 Theme A/B experiment harness (random assignment + logging) [T]
[x] 5.10.55 Personalization preview panel (simulate user preference sets: reduced motion, high contrast)
[x] 5.10.56 Multi-monitor DPI live recalibration (listen + update scaling tokens)
[x] 5.10.57 Custom window chrome/titlebar with integrated tabs (Windows platform feasibility) [R]
[x] 5.10.58 Animated tab open/close transitions (opacity + scale) with easing tokens
[x] 5.10.59 Status bar rich segments (icon badges, mini sparkline, freshness pill) token-aligned
[x] 5.10.60 Developer color picker overlay (sample any on-screen pixel + token suggestion)
[x] 5.10.61 Reduced color / monochrome mode fallback styling toggle
[x] 5.10.62 Print stylesheet parity test harness (layout + contrast assertions) [T]
[x] 5.10.63 Shadow elevation visual regression testing (bitmap hash snapshots) [T]
[x] 5.10.64 Layout shift monitor (collect cumulative layout shift metric) [T]
[x] 5.10.65 Accessibility focus order visual path map overlay [D]
[x] 5.10.66 Modal backdrop auto-darken & subtle zoom animation (reduced-motion fallback)
[x] 5.10.67 Animated progress indicators (determinate + indeterminate variants) token-driven
[x] 5.10.68 Smooth layout reflow during window resize (debounced transform strategy)
[x] 5.10.69 Theme warm-load prefetch (precompute derived palettes in idle)
[x] 5.10.70 Virtualized list styling parity test (ensure consistent tokens) [T]

Milestone 6: Advanced Statistics Engine
[x] 6.1 Stats service: compute aggregated KPIs (win %, avg LivePZ per lineup, player participation rate)
[x] 6.1.1 KPI registry (declarative definitions + metadata)
[x] 6.2 Time-series builder (date-indexed match density, availability coverage)
[x] 6.3 Player strength distribution histograms (binning LivePZ)
[x] 6.4 Match outcome predictor (baseline heuristic: average top N player LivePZ vs opponent)
[x] 6.4.1 Add calibration metrics logging (Brier score placeholder)
[x] 6.5 Division strength index (ELO-like aggregate per division)
[x] 6.5.1 Expose rating history graph ready endpoint
[x] 6.6 Trend detection (rolling 5-match form per team)
[x] 6.7 Caching & invalidation for stats (inputs hashed, DB triggers or timestamp checks)
[x] 6.8 Unit tests for stats calculations (edge: empty team, partial season, missing LivePZ)
[x] 6.9 Stats profiling harness (time + memory, large synthetic dataset)

Milestone 7: Visualization Layer
[x] 7.1 Common charting wrapper (e.g., PyQtGraph or Matplotlib embed abstraction)
[x] 7.1.1 Chart plugin interface (register new chart types dynamically)
[x] 7.2 Theme-aware color palette manager for charts
[x] 7.3 Implement charts: Player LivePZ progression line chart
[x] 7.4 Implement charts: Team availability heatmap (player vs date)
[x] 7.5 Implement charts: Division standings evolution (round-based positions)
[x] 7.6 Implement charts: Match volume timeline & cumulative win %
[x] 7.7 Interactive tooltips + export as PNG/SVG
[x] 7.8 Performance tuning (lazy loading large datasets)
[x] 7.9 Responsive layout adaptation (minimum sizes, hide secondary legends)

Milestone 7.10: Interactive Ingestion Customization & Sandbox Panel
Goal: Provide a power-user, fully transparent GUI panel to introspect every HTML asset in the data directory, declaratively define extraction rules, map outputs to the SQLite schema (or ad‑hoc preview schemas), run test ingests in isolation, and visualize exact parsed outputs + diffs before committing changes. Must leverage existing scraping/ingestion architecture (IngestionCoordinator, repositories, provenance, hashing, post-scrape hooks) while remaining non-destructive until explicitly applied.

 Architecture & Core Panel Shell
 [x] 7.10.1 Create dockable "Ingestion Lab" panel (multi-pane: File Navigator | Rule Editor | Preview | Execution Log)
 [x] 7.10.2 File Navigator: tree/grid of HTML assets grouped by logical phase (landing, ranking_tables, division_rosters, club_overviews, club_team_pages, player_histories, tracking_state)
 [x] 7.10.3 Detect & display provenance metadata (hash, last parsed timestamp, size, parser version) per file
 [x] 7.10.4 Provide search & filter (by filename, phase, size range, last modified) (hash delta deferred)
 [x] 7.10.5 Integrate existing Theme / density / reduced-color modes for full style consistency

 Extraction Rule Model
 [x] 7.10.6 Define declarative rule schema (YAML/JSON) core: table & list rules, field selectors (attr/text/regex transformations deferred)
 [x] 7.10.7 Support chained transforms (trim, collapse whitespace, number parse, date parse, custom python expression sandbox – optional flag) with safety guard
 [x] 7.10.8 Rule inheritance & overrides (base rule set per phase with user layer overrides)
 [x] 7.10.9 Validation engine: static check of selectors against selected file(s) (counts, missing selectors warning)
 [x] 7.10.10 Live rule documentation tooltip (auto-generated from schema with examples)

 Mapping & Schema Customization
 [x] 7.10.11 Visual mapping grid: extracted fields -> target table columns (with type inference & status icons)
 [x] 7.10.12 Alternate target schema sandbox (temp in-memory tables) for experimental structures
 [x] 7.10.13 Auto-generate migration preview SQL when mapping diverges from current schema (non-destructive diff)
 [x] 7.10.14 Constraint simulation: show potential FK / uniqueness violations before commit
 [x] 7.10.15 Data type coercion preview (raw -> coerced) with highlighting of failures

 Preview & Execution Sandbox
 [x] 7.10.16 Single-file parse preview: raw HTML snippet (highlight matched nodes), extracted JSON tree, tabular flattening
 [x] 7.10.17 Multi-file batch preview (select N files -> aggregated result set diff summary)
 [x] 7.10.18 Delta viewer: compare current repository objects vs proposed re-parse (added / removed / changed rows; per-field diff)
 [x] 7.10.19 Performance metrics capture (parse time, node count visited, memory delta) per test run
 [x] 7.10.20 Error channel integration: structured parse errors & transform failures surfaced in panel (reuse logging JSONL pipeline)
 [x] 7.10.21 Partial apply mode: write only selected entities to sandbox DB for iterative refinement
 [x] 7.10.22 Hash impact preview: show which provenance entries would be updated (and which cached paths reused)

 Testing & Verification Hooks
 [ ] 7.10.23 Inline assertion editor: user can define expected extracted values for specific selectors; run asserts per preview
 [ ] 7.10.24 Snapshot test generator: capture current extraction result set -> store under tests/ingestion_snapshots for regression
 [ ] 7.10.25 Quick diff tool: run old vs new rule set over same file set -> side-by-side metrics & row diff counts
 [ ] 7.10.26 Field coverage heatmap: which DB columns populated by current rule set (percentage & missing list)
 [ ] 7.10.27 Orphan field detector: extracted fields not mapped anywhere (suggest actions)
 [ ] 7.10.28 Data quality gates: min non-null ratio thresholds configurable per column (warn/fail)

 Integration with Existing Pipeline
 [ ] 7.10.29 Adapter layer: convert rule schema -> existing parser calls or dynamic parser objects (strategy pattern registered in IngestionCoordinator)
 [ ] 7.10.30 Safe execution guard: sandbox mode never commits to main DB unless "Apply" pressed & passes validations
 [ ] 7.10.31 Post-apply prompt: show summary (rows upserted/unchanged/skipped) without modal dialogs (inline panel banner)
 [ ] 7.10.32 Emit EVENT: INGEST_RULES_APPLIED with metadata (counts, duration) -> status bar freshness update
 [ ] 7.10.33 Maintain separate rule set versions (versioned JSON docs + rollback capability)
 [ ] 7.10.34 Rule provenance: track which rule set version produced each row (extend provenance table)

 Advanced Features / Power Tools
 [ ] 7.10.35 Visual selector picker: click element in rendered HTML mini-browser to auto-generate CSS selector/XPath
 [ ] 7.10.36 Regex tester pane: live highlighting & group extraction preview
 [ ] 7.10.37 Derived field composer: define new fields from existing extracted fields (expression builder with validation)
 [ ] 7.10.38 Multi-phase dependency graph viewer (which extracted fields feed later transforms)
 [ ] 7.10.39 Parallel parse benchmarking: run selected files across rule variants (A/B) and compare metrics
 [ ] 7.10.40 Caching inspector: show which files were skipped due to unchanged hash under new rules vs forced re-parse
 [ ] 7.10.41 Security sandbox: detect & flag disallowed Python in custom expression transforms
 [ ] 7.10.42 Export / import rule sets (share or version control JSON)

 UI/UX Polish & Accessibility
 [ ] 7.10.43 Keyboard-first workflow (file selection, rule navigation, execution) with shortcuts cheat sheet
 [ ] 7.10.44 High-contrast & reduced-color adaptations for complex diff/preview views
 [ ] 7.10.45 Inline performance warnings (badge if preview parse > threshold)
 [ ] 7.10.46 Loading skeletons for large batch preview operations
 [ ] 7.10.47 Status pills (Parsed / Unchanged / Error / Skipped) for each file row
 [ ] 7.10.48 Toast notifications integration (success, warnings) reusing tokenized styles (no blocking modals)

 Persistence & Configuration
 [ ] 7.10.49 Rule set autosave draft state with explicit publish action
 [ ] 7.10.50 Settings: default preview batch size, performance threshold, safety level (disallow custom python)
 [ ] 7.10.51 Telemetry counters (preview runs, applied runs, avg parse time) behind debug flag

 Documentation & Tests
 [ ] 7.10.52 Developer guide: rule schema specification + extension points [D]
 [ ] 7.10.53 ADR: Dynamic ingestion rule architecture (& rationale vs static parser classes) [D]
 [ ] 7.10.54 Unit tests: rule validation, transform chaining, mapping diff generation [T]
 [ ] 7.10.55 Integration tests: sandbox apply vs real apply produce consistent DB deltas [T]
 [ ] 7.10.56 Performance test: batch preview (N=50 division roster files) < target ms baseline [T]
 [ ] 7.10.57 Visual regression snapshots for diff view & mapping grid [T]
 [ ] 7.10.58 Security tests: ensure disallowed python expressions blocked [T]
 [ ] 7.10.59 Snapshot regression test generator CLI command (update stored expected extractions) [T]

 Migration / Adjustment of Existing Features
 [ ] 7.10.60 Update IngestionCoordinator to load active rule set version & attach provenance rule version id
 [ ] 7.10.61 Extend ScrapeRunner post-scrape hook to optionally auto-open Ingestion Lab if new HTML detected but no rules exist
 [ ] 7.10.62 Adjust repository caching (RosterCacheService) to invalidate on rule set version change
 [ ] 7.10.63 Update DataFreshnessService to include rule version in freshness summary
 [ ] 7.10.64 Extend export presets if needed to include rule-set-derived fields
 [ ] 7.10.65 Enhance Logs Dock to filter on ingestion rule events (INGEST_RULES_APPLIED, RULE_VALIDATION_FAILED)
 [ ] 7.10.66 Add Command Palette actions: Open Ingestion Lab, Apply Current Rule Set, Revert to Previous Rule Version
 [ ] 7.10.67 Update theme tokens / QSS if new panel introduces novel component patterns (diff grid, selector picker)
 [ ] 7.10.68 Accessibility audit for new panel interactive complexity

 Exit Criteria: User can open Ingestion Lab, craft or modify rules, preview multi-file extraction, inspect diffs, validate & apply changes updating DB + provenance, rollback if needed, and observe ETA/stats unaffected elsewhere.


Milestone 8: Availability & Match Planning Module
[ ] 8.1 Schema: availability (player_id, date, status, confidence, note)
[ ] 8.1.1 Add constraint: unique (player_id, date)
[ ] 8.2 UI: availability calendar (month & agenda view, toggle statuses)
[ ] 8.2.1 Keyboard navigation & multi-select drag
[ ] 8.3 Bulk import / paste availability (spreadsheet-style dialog)
[ ] 8.4 Auto-suggest availability based on past participation heuristics
[ ] 8.5 Scenario builder: define upcoming match, propose candidate lineup
[ ] 8.6 Optimization engine (Phase 1): maximize total LivePZ subject to min players constraint & availability
[ ] 8.6.1 Linear solver adapter interface (switch between OR-Tools / pulp / heuristic)
[ ] 8.7 Optimization engine (Phase 2): consider fairness (balance appearances) with adjustable weights
[ ] 8.8 Reschedule advisor: find alternative match dates (within league constraints) improving predicted strength
[ ] 8.9 Conflict detector: highlight clashes (two matches same date for shared players)
[ ] 8.10 What-if comparison: side-by-side two proposed lineups with projected outcome probability
[ ] 8.11 Export lineup plan (PDF / Markdown)
[ ] 8.12 Add unit tests for optimization core (constraint satisfaction, tie-breaking)
[ ] 8.13 Refactor optimization parameters into strategy objects
[ ] 8.14 Scenario versioning & rollback

Milestone 9: Data Acquisition & Refresh UX
[ ] 9.1 GUI Scrape Runner dock: choose club id, season, output dir
[ ] 9.1.1 Validate club id numeric & season range
[ ] 9.2 Progress signals + cancellable tasks (QThreadPool + QRunnable)
[ ] 9.2.1 Add cancellation safety checkpoints inside long loops
[ ] 9.3 Live log streaming into Logs Dock
[ ] 9.4 Post-scrape diff summary (files added/removed/changed)
[ ] 9.5 Automatic DB ingest after successful scrape
[ ] 9.6 Notification system (toast bubbles) for completion/errors
[ ] 9.7 Scheduled scrape (cron-like simple scheduler within app lifetime)
[ ] 9.7.1 Missed schedule detection (app was closed)
[ ] 9.8 Retry policy customization (timeouts, backoff)
[ ] 9.9 Proxy / network settings UI

Milestone 10: Data Quality & Validation
[ ] 10.1 Consistency checker: ensure every match references existing teams
[ ] 10.2 Player duplication resolver (same name, multiple IDs) with merge wizard
[ ] 10.3 Missing data report (teams without any players, matches missing scores after date passed)
[ ] 10.4 Integrity dashboard dock (traffic-light statuses)
[ ] 10.5 Auto-fix routines (optional apply) + preview
[ ] 10.6 Validation rule configuration UI
[ ] 10.7 Scheduled nightly validation run

Milestone 11: Persistence & Settings
[ ] 11.1 Settings model (json or sqlite table) with categories (UI, Data, Planner)
[ ] 11.1.1 Settings schema versioning & migration
[ ] 11.2 Settings dialog (tabbed) with live preview for theme/fonts
[ ] 11.3 Recent projects / data directories quick switcher
[ ] 11.4 Backup & restore (zip export of DB + HTML snapshot)
[ ] 11.5 Auto-clean old HTML snapshots (retention policy)
[ ] 11.6 Encrypted sensitive settings (future expansion)

Milestone 12: Extensibility & Plugin Hooks
[ ] 12.1 Define plugin interface (entrypoint for stats transformers, planners)
[ ] 12.2 Plugin discovery & sandboxing (separate thread / process for heavy compute?)
[ ] 12.3 Sample plugin: custom ELO rating variant
[ ] 12.4 Plugin management UI (enable/disable, reload)
[ ] 12.5 Plugin manifest validation (semantic version, compatibility)
[ ] 12.6 Plugin error isolation with fallback disable

Milestone 13: Testing & QA Strategy
[ ] 13.1 Unit test harness for GUI-neutral logic (stats, repositories, optimization)
[ ] 13.1.1 Parametrized tests for edge-case rosters (empty, single player, large roster)
[ ] 13.2 Lightweight GUI smoke tests (QTest) for critical flows
[ ] 13.3 Performance tests (timing statistics computation with N matches)
[ ] 13.4 Memory leak watch (periodic snapshot of object counts)
[ ] 13.5 Manual exploratory test checklist document
[ ] 13.6 Test data generator (synthetic season generator script)
[ ] 13.7 Deterministic seeding for optimization tests
[ ] 13.8 CI coverage threshold gate (fail < 80% critical modules)

Milestone 14: Documentation & Onboarding
[ ] 14.1 Developer README: architecture + data flow diagrams
[ ] 14.2 User Guide: Getting started, scraping, planning scenarios
[ ] 14.3 Inline help tooltips & Help panel
[ ] 14.4 Glossary of terms (LivePZ, availability states)
[ ] 14.5 Changelog automation (commit tag extraction)
[ ] 14.6 ADR (Architecture Decision Records) template + first 5 ADRs (DB choice, plugin model, theming approach, optimization strategy, event bus)
[ ] 14.7 Contributor guide (branching model, code style, review checklist)

Milestone 15: Polishing & UX Enhancements
[ ] 15.1 Animated dock transitions & micro-interactions (hover states, subtle fades)
[ ] 15.2 Busy indicators & skeleton loading placeholders
[ ] 15.3 Accessibility pass (font scaling, contrast validation, keyboard nav)
[ ] 15.4 Undo/redo stack for planner adjustments
[ ] 15.5 Quick action bar (frequent tasks pinned)
[ ] 15.6 Intelligent prefetch (when user selects division, pre-load adjacent teams)
[ ] 15.7 Handoff animation between detail views
[ ] 15.8 User satisfaction survey hook (optional telemetry off by default)
[ ] 15.9 Latency budget tracking (warn if UI thread blocked > 120ms)

Milestone 16: Deployment & Distribution
[ ] 16.1 Freeze app (PyInstaller or Briefcase) for Windows initial build
[ ] 16.2 Create version metadata endpoint (local JSON) & update checker
[ ] 16.3 Crash report bundling (log + environment snapshot)
[ ] 16.4 Installer packaging (MSIX or Inno Setup script)
[ ] 16.5 Release pipeline script (tag -> build -> artifacts)
[ ] 16.6 Code signing strategy doc (future)
[ ] 16.7 Artifact integrity checksum generation

Cross-Cutting Spikes / Research Tasks
[ ] R1 Evaluate PyQtGraph vs Matplotlib vs QtCharts for performance & theming
[ ] R2 Explore OR-Tools or pulp for optimization engine vs custom heuristic
[ ] R3 Assess plugin sandbox security constraints
[ ] R4 Research caching strategy for large historical seasons
[ ] R5 Evaluate use of Polars or DuckDB for advanced analytics
[ ] R6 Assess feasibility of real-time collaboration architecture
[ ] R7 Investigate incremental parsing with lxml for speed

Early Demonstration Sequence (Incremental Value Delivery)
[ ] Demo 1: Basic navigation (Milestones 1-2 partial) + ingest to SQLite (3.1-3.4)
[ ] Demo 2: Team & player detail views (5.1, 5.2) + basic stats (6.1)
[ ] Demo 3: Charts (7.3, 7.4) + availability entry (8.1, 8.2)
[ ] Demo 4: Optimization Phase 1 (8.6) + match predictor (6.4)
[ ] Demo 5: Division evolution + planning scenarios + export (7.5, 8.10, 8.11)
[ ] Demo 6: Plugin sample + integrity dashboard + scheduler (12.3, 10.4, 9.7)
[ ] Demo 7: Packaging + theming polish + accessibility (16.1, 15.3)

Risk & Mitigation Tasks
[ ] Risk: HTML layout changes -> add parser contract tests
[ ] Risk: Parser drift -> schedule weekly snapshot diff job
[ ] Risk: Large DB performance -> add indexes & query planner review
[ ] Risk: Optimization complexity -> implement fallback greedy heuristic
[ ] Risk: Plugin instability -> isolate via process boundary (future)
[ ] Risk: Visualization performance -> lazy load, limit points, windowing
[ ] Risk: Memory bloat -> periodic cache pruning task
[ ] Risk: Event storm -> rate limit or batch events in EventBus

Metrics / Success Criteria
[ ] Metric: Load + display 5000 matches < 2s post-ingest
[ ] Metric: Optimization run (12-team round) < 1s
[ ] Metric: Memory footprint < 500MB with full season loaded
[ ] Metric: >90% code coverage on analytics/optimization layer
[ ] Metric: UI thread idle time > 70% during idle baseline
[ ] Metric: Cold start < 3s on reference machine
[ ] Metric: P95 stats recompute latency < 400ms
[ ] Metric: P99 scrape-to-ingest pipeline completion < 2.5x median
[ ] Metric: DB vacuum/maintenance window < 60s weekly
[ ] Metric: Peak memory during bulk ingest < 1.4x steady state
[ ] Metric: Background optimization CPU usage cap < 60% single core equivalent

Documentation Tasks Interleaved
[ ] D1 Architecture diagram after Milestone 2
[ ] D2 Schema ERD after Milestone 3
[ ] D3 Stats formula reference after Milestone 6
[ ] D4 Planner algorithm note after Milestone 8
[ ] D5 Plugin API doc after Milestone 12
[ ] D6 Theming guide after Milestone 15
[ ] D7 Deployment handbook after Milestone 16

Testing Hooks for Each Milestone
[ ] T1 Unit tests for migration + repo (Milestone 3)
[ ] T2 Mock stats inputs vs expected outputs (Milestone 6)
[ ] T3 GUI smoke test: open 10 teams sequentially w/out crash (Milestone 5)
[ ] T4 Performance baseline test script (Milestone 6/7)
[ ] T5 Optimization scenario assertions (Milestone 8)
[ ] T6 Plugin load/unload lifecycle test (Milestone 12)
[ ] T7 Visualization regression image diff tests (Milestone 7)
[ ] T8 Accessibility automated contrast checks (Milestone 15)
[ ] T9 Cold start timing regression test (Milestone 16)

Optional Nice-to-Haves (Defer if time constrained)
[ ] NH1 Multi-season comparison dashboards
[ ] NH2 Cloud sync for availability (remote JSON endpoint)
[ ] NH3 Sharing planning scenarios (export/import bundle)
[ ] NH4 Real-time collaboration (future; websockets stub)
[ ] NH5 Interactive query console (SQL / DSL hybrid)
[ ] NH6 AI-assisted lineup suggestion (experimental)
[ ] NH7 Export animated GIF of standings evolution

Endgame / Release Checklist
[ ] RC1 All demos validated
[ ] RC2 All metrics thresholds met or documented exceptions
[ ] RC3 Accessibility checklist passed
[ ] RC4 Crash log path documented
[ ] RC5 Versioned release artifacts published
[ ] RC6 Security review (dependencies, licenses)
[ ] RC7 Final ADR review & freeze

Performance & Concurrency (Cross-Cutting) Milestone P (can run in parallel with 3, 6, 7, 8)
[ ] P1 Establish profiling harness (cProfile + pyinstrument) with scenario scripts (ingest, stats recompute, optimization run)
[ ] P1.1 Automated weekly performance baseline job (store JSON metrics history)
[ ] P2 Introduce timing decorator/context manager utility (records to ring buffer + optional log)
[ ] P3 Build flamegraph generation script (using py-spy or pyinstrument HTML export)
[ ] P4 Identify CPU hot paths in parsing (BeautifulSoup) -> evaluate lxml fallback experiment
[ ] P4.1 Prototype lxml-based parser for ranking table; compare speed & parity
[ ] P5 Introduce job scheduler abstraction (priority queues: USER_INTERACTIVE, BACKGROUND, MAINTENANCE)
[ ] P6 Multithreaded HTML parsing pool (ThreadPoolExecutor) with concurrency cap (IO-bound)
[ ] P6.1 Adaptive concurrency scaling (based on average task latency)
[ ] P7 Multiprocessing for CPU-bound analytics (stats batch compute) with process pool + shared read-only memory snapshot
[ ] P7.1 Graceful child process restart on memory growth threshold
[ ] P8 Async HTTP fetching prototype (httpx/asyncio) behind interface; fallback to sync until stable
[ ] P8.1 Connection pooling & backoff strategy centralization
[ ] P9 Caching layer tiers: in-memory LRU (per run), persistent SQLite materialized views, serialized stats blobs
[ ] P9.1 Cache invalidation triggers (HTML hash change, season boundary, manual flush)
[ ] P9.2 Cache metrics (hit %, evictions, stale serves) dashboard stub
[ ] P10 Batch DB writes (use transactions around per-division ingest) to reduce fsync overhead
[ ] P10.1 WAL mode evaluation & configuration (trade-offs doc)
[ ] P11 Prepared statement reuse / statement cache wrapper
[ ] P12 Introduce read replicas concept (future) or query routing stub for scaling plan
[ ] P13 Stats engine incremental update (only recompute impacted aggregates on new match)
[ ] P13.1 Dependency graph of aggregates (topological order for recompute)
[ ] P14 Optimizer engine profiling (track constraint build time vs solver time)
[ ] P14.1 Parallel scenario evaluation (multiple what-if lineups concurrently)
[ ] P15 Vectorization spike: experiment with numpy/polars for bulk stat aggregations
[ ] P15.1 Benchmark: Python loops vs numpy vs polars vs SQLite window functions
[ ] P16 Memory audit: identify large objects (tracemalloc snapshot diff after scenarios)
[ ] P16.1 Retained reference cycle detector (gc.get_referrers scan utility)
[ ] P17 Add fast path for small datasets (disable heavy caches, animations)
[ ] P18 Idle-time maintenance tasks (cache compaction, DB VACUUM) scheduler window
[ ] P19 Progressive loading: show partial division results while remainder still computing
[ ] P20 UI thread watchdog (detect blocking operations > 120ms; emit warning event)
[ ] P21 Background task cancellation & cooperative checkpoints (long stats loops)
[ ] P22 Integrate concurrency stress test (spawn N parallel scrapes with mock server)
[ ] P23 Structured performance regression alerts (compare current baseline to N-1 median; flag >15% regression)
[ ] P24 Add fallback path for low-resource mode (reduced animations, smaller caches) toggle
[ ] P25 Pre-warm caches on startup (lazy schedule after initial UI idle)
[ ] P26 Optimize roster diff computation (switch to diff-match-patch or O(N) hashing approach) spike
[ ] P27 Columnar in-memory representation for player stats (array-of-struct vs struct-of-arrays comparison)
[ ] P28 Adaptive prediction model selection (lightweight heuristic if < X matches) to reduce compute
[ ] P29 Fast approximate string matching (RapidFuzz) for search vs pure Python fallback
[ ] P29.1 Cache normalized tokens for fuzzy search index
[ ] P30 Introduce metrics exporter (Prometheus textfile style) for external observability
[ ] P31 Add optional tracing (OpenTelemetry spans) around ingest, stats, optimization pipelines
[ ] P32 Benchmark environment container (fixed hardware constraints) for reproducible runs
[ ] P33 Scenario optimization parallel neighborhood search (multi-process branching)
[ ] P34 Heuristic warm start for solver (use last successful lineup) to cut solve time
[ ] P35 Rolling window stats materialization (avoid full-season recompute each query)
[ ] P36 Precompiled regex pool (central registry) to avoid recompilation overhead
[ ] P37 HTML parsing micro-benchmark suite (per tag selection cost)
[ ] P38 GIL contention analysis (py-spy gil stats) after multithread prototype
[ ] P39 Evaluate PyPy or CPython 3.x future features (e.g., nogil proposals) feasibility note
[ ] P40 ADR: Chosen concurrency model (threads + processes hybrid) rationale
